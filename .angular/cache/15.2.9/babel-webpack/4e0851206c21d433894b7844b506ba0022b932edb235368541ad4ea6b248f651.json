{"ast":null,"code":"import { FormControl, FormGroup } from '@angular/forms';\nimport { QuizMakerConstants } from '../../constants/quiz-maker.constant';\nimport { Subscription } from 'rxjs';\nimport { decode } from 'html-entities';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/quiz.service\";\nimport * as i2 from \"ngx-spinner\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../questions/questions.component\";\nfunction CreateNewQuizComponent_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r3 == null ? null : category_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", category_r3 == null ? null : category_r3.name, \"\");\n  }\n}\nfunction CreateNewQuizComponent_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const difficulty_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", difficulty_r5.level);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(difficulty_r5.name);\n  }\n}\nfunction CreateNewQuizComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"app-questions\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"results\", ctx_r2.questionResult.results);\n  }\n}\nexport class CreateNewQuizComponent {\n  constructor(quizService, spinner) {\n    this.quizService = quizService;\n    this.spinner = spinner;\n    this.amount = QuizMakerConstants.AMOUNT;\n    this.type = QuizMakerConstants.TYPE;\n    this.subscription = new Subscription();\n    this.CreateQuizForm = new FormGroup({\n      category: new FormControl(''),\n      difficulty: new FormControl('')\n    });\n    this.difficultyLevels = [{\n      name: 'Select Difficulty',\n      level: ''\n    }, {\n      name: 'Easy',\n      level: 'easy'\n    }, {\n      name: 'Medium',\n      level: 'medium'\n    }, {\n      name: 'Hard',\n      level: 'hard'\n    }];\n  }\n  ngOnInit() {\n    //to get categories \n    this.spinner.show();\n    this.subscription = this.quizService.getCategories().subscribe(res => {\n      this.categoryList = res;\n    });\n    this.spinner.hide();\n  }\n  createQuiz() {\n    const category = this.CreateQuizForm.value.category;\n    const difficulty = this.CreateQuizForm.value.difficulty;\n    if (category !== '' && difficulty !== '') {\n      this.spinner.show();\n      //to get list of questions based on category, difficulty level\n      this.subscription = this.quizService.getQuestionsList(this.amount, category, difficulty, this.type).subscribe(res => {\n        this.questionResult = res;\n        for (let option of this.questionResult.results) {\n          option.question = decode(option.question);\n          option.correct_answer = decode(option.correct_answer);\n          option.selectedAnswer = '';\n          //generate random index\n          let insertrandomIndex = Math.floor(Math.random() * 4);\n          //insert correct answer into array \n          option.incorrect_answers.splice(insertrandomIndex, 0, option.correct_answer);\n          for (const [key, value] of option.incorrect_answers.entries()) {\n            option.incorrect_answers[key] = decode(value);\n          }\n        }\n        this.spinner.hide();\n      });\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nCreateNewQuizComponent.ɵfac = function CreateNewQuizComponent_Factory(t) {\n  return new (t || CreateNewQuizComponent)(i0.ɵɵdirectiveInject(i1.QuizService), i0.ɵɵdirectiveInject(i2.NgxSpinnerService));\n};\nCreateNewQuizComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateNewQuizComponent,\n  selectors: [[\"app-create-new-quiz\"]],\n  decls: 18,\n  vars: 4,\n  consts: [[1, \"createNewQuizpage\"], [3, \"formGroup\"], [1, \"row\"], [1, \"form-group\", \"col-md-5\"], [\"formControlName\", \"category\", \"id\", \"categorySelect\", \"placeholder\", \"Select a category\", 1, \"form-control\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"difficulty\", \"id\", \"difficultySelect\", \"placeholder\", \"Select difficulty\", 1, \"form-control\"], [1, \"form-group\", \"col-md-1\"], [\"id\", \"createBtn\", 1, \"btn\", \"create-quiz-btn\", 3, \"click\"], [\"class\", \"question-list\", 4, \"ngIf\"], [\"bdColor\", \"rgba(0, 0, 0, 0.5)\", \"template\", \"<img src='../../../assets/images/loader.gif' />\"], [3, \"value\"], [1, \"question-list\"], [3, \"results\"]],\n  template: function CreateNewQuizComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\");\n      i0.ɵɵtext(2, \"QUIZ MAKER\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1)(4, \"div\", 2)(5, \"div\", 3)(6, \"select\", 4)(7, \"option\", 5);\n      i0.ɵɵtext(8, \"Select a category\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, CreateNewQuizComponent_option_9_Template, 2, 2, \"option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 3)(11, \"select\", 7);\n      i0.ɵɵtemplate(12, CreateNewQuizComponent_option_12_Template, 2, 2, \"option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 8)(14, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function CreateNewQuizComponent_Template_button_click_14_listener() {\n        return ctx.createQuiz();\n      });\n      i0.ɵɵtext(15, \"Create\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(16, CreateNewQuizComponent_div_16_Template, 2, 1, \"div\", 10);\n      i0.ɵɵelement(17, \"ngx-spinner\", 11);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.CreateQuizForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.categoryList == null ? null : ctx.categoryList.trivia_categories);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.difficultyLevels);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.questionResult == null ? null : ctx.questionResult.results);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i2.NgxSpinnerComponent, i5.QuestionsComponent],\n  styles: [\".createNewQuizpage[_ngcontent-%COMP%] {\\n  margin: auto;\\n  width: 65%;\\n  padding: 15px;\\n  text-align: center;\\n}\\n\\nh4[_ngcontent-%COMP%] {\\n  margin-bottom: 20px;\\n}\\n\\n.create-quiz-btn[_ngcontent-%COMP%] {\\n  background-color: #3a3e42;\\n  color: #ffffff;\\n  border-color: #3a3e42;\\n  font-size: 14px;\\n}\\n\\n.create-quiz-btn[_ngcontent-%COMP%]:hover, .create-quiz-btn[_ngcontent-%COMP%]:focus {\\n  background-color: #3a3e42;\\n  border-color: #3a3e42;\\n}\\n\\n.create-quiz-btn[_ngcontent-%COMP%]:active {\\n  background-color: #3a3e42;\\n  color: #ffffff;\\n  border-color: #3a3e42;\\n}\\n\\n.form-group[_ngcontent-%COMP%] {\\n  padding: 0px !important;\\n}\\n\\n.form-control[_ngcontent-%COMP%] {\\n  border-color: #adb5bd;\\n  font-size: 14px;\\n}\\n\\n.lds-ring[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  position: relative;\\n  width: 80px;\\n  height: 80px;\\n}\\n\\n.lds-ring[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  box-sizing: border-box;\\n  display: block;\\n  position: absolute;\\n  width: 64px;\\n  height: 64px;\\n  margin: 8px;\\n  border: 8px solid #fff;\\n  border-radius: 50%;\\n  animation: _ngcontent-%COMP%_lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\\n  border-color: #fff transparent transparent transparent;\\n}\\n\\n.lds-ring[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(1) {\\n  animation-delay: -0.45s;\\n}\\n\\n.lds-ring[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2) {\\n  animation-delay: -0.3s;\\n}\\n\\n.lds-ring[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(3) {\\n  animation-delay: -0.15s;\\n}\\n\\n@keyframes _ngcontent-%COMP%_lds-ring {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jcmVhdGUtbmV3LXF1aXovY3JlYXRlLW5ldy1xdWl6LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksWUFBQTtFQUNBLFVBQUE7RUFDQSxhQUFBO0VBQ0Esa0JBQUE7QUFDSjs7QUFDQTtFQUNJLG1CQUFBO0FBRUo7O0FBQUE7RUFDSSx5QkFBQTtFQUNBLGNBQUE7RUFDQSxxQkFBQTtFQUNBLGVBQUE7QUFHSjs7QUFBQTtFQUNJLHlCQUFBO0VBQ0EscUJBQUE7QUFHSjs7QUFEQTtFQUNJLHlCQUFBO0VBQ0EsY0FBQTtFQUNBLHFCQUFBO0FBSUo7O0FBRkE7RUFDSSx1QkFBQTtBQUtKOztBQUhBO0VBQ0kscUJBQUE7RUFDQSxlQUFBO0FBTUo7O0FBSEE7RUFDSSxxQkFBQTtFQUNBLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7QUFNSjs7QUFKRTtFQUNFLHNCQUFBO0VBQ0EsY0FBQTtFQUNBLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0Esc0JBQUE7RUFDQSxrQkFBQTtFQUNBLDhEQUFBO0VBQ0Esc0RBQUE7QUFPSjs7QUFMRTtFQUNFLHVCQUFBO0FBUUo7O0FBTkU7RUFDRSxzQkFBQTtBQVNKOztBQVBFO0VBQ0UsdUJBQUE7QUFVSjs7QUFSRTtFQUNFO0lBQ0UsdUJBQUE7RUFXSjtFQVRFO0lBQ0UseUJBQUE7RUFXSjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLmNyZWF0ZU5ld1F1aXpwYWdlIHtcclxuICAgIG1hcmdpbjogYXV0bztcclxuICAgIHdpZHRoOiA2NSU7XHJcbiAgICBwYWRkaW5nOiAxNXB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbmg0e1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxufVxyXG4uY3JlYXRlLXF1aXotYnRue1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNhM2U0MjtcclxuICAgIGNvbG9yOiAjZmZmZmZmO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjM2EzZTQyOyBcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxufVxyXG5cclxuLmNyZWF0ZS1xdWl6LWJ0bjpob3ZlciwgLmNyZWF0ZS1xdWl6LWJ0bjpmb2N1c3tcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzYTNlNDI7XHJcbiAgICBib3JkZXItY29sb3I6ICMzYTNlNDI7IFxyXG59XHJcbi5jcmVhdGUtcXVpei1idG46YWN0aXZle1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzNhM2U0MjtcclxuICAgIGNvbG9yOiAjZmZmZmZmO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjM2EzZTQyO1xyXG59XHJcbi5mb3JtLWdyb3Vwe1xyXG4gICAgcGFkZGluZzogMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuLmZvcm0tY29udHJvbHtcclxuICAgIGJvcmRlci1jb2xvcjogI2FkYjViZDtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxufVxyXG5cclxuLmxkcy1yaW5nIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiA4MHB4O1xyXG4gICAgaGVpZ2h0OiA4MHB4O1xyXG4gIH1cclxuICAubGRzLXJpbmcgZGl2IHtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHdpZHRoOiA2NHB4O1xyXG4gICAgaGVpZ2h0OiA2NHB4O1xyXG4gICAgbWFyZ2luOiA4cHg7XHJcbiAgICBib3JkZXI6IDhweCBzb2xpZCAjZmZmO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgYW5pbWF0aW9uOiBsZHMtcmluZyAxLjJzIGN1YmljLWJlemllcigwLjUsIDAsIDAuNSwgMSkgaW5maW5pdGU7XHJcbiAgICBib3JkZXItY29sb3I6ICNmZmYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XHJcbiAgfVxyXG4gIC5sZHMtcmluZyBkaXY6bnRoLWNoaWxkKDEpIHtcclxuICAgIGFuaW1hdGlvbi1kZWxheTogLTAuNDVzO1xyXG4gIH1cclxuICAubGRzLXJpbmcgZGl2Om50aC1jaGlsZCgyKSB7XHJcbiAgICBhbmltYXRpb24tZGVsYXk6IC0wLjNzO1xyXG4gIH1cclxuICAubGRzLXJpbmcgZGl2Om50aC1jaGlsZCgzKSB7XHJcbiAgICBhbmltYXRpb24tZGVsYXk6IC0wLjE1cztcclxuICB9XHJcbiAgQGtleWZyYW1lcyBsZHMtcmluZyB7XHJcbiAgICAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","QuizMakerConstants","Subscription","decode","i0","CreateNewQuizComponent","constructor","quizService","spinner","AMOUNT","TYPE","category","difficulty","name","level","ngOnInit","show","subscription","getCategories","subscribe","res","categoryList","hide","createQuiz","CreateQuizForm","value","getQuestionsList","amount","type","questionResult","option","results","question","correct_answer","selectedAnswer","insertrandomIndex","Math","floor","random","incorrect_answers","splice","key","entries","ngOnDestroy","unsubscribe","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\angular-certification\\Mounika-test\\quiz-maker\\src\\app\\components\\create-new-quiz\\create-new-quiz.component.ts","D:\\angular-certification\\Mounika-test\\quiz-maker\\src\\app\\components\\create-new-quiz\\create-new-quiz.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { QuizService } from '../../services/quiz.service';\r\nimport { Category, MainCategory } from '../../models/category';\r\nimport { questionAnswers} from '../../models/questions';\r\nimport { QuizMakerConstants } from '../../constants/quiz-maker.constant';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\nimport { decode } from 'html-entities';\r\n\r\n@Component({\r\n  selector: 'app-create-new-quiz',\r\n  templateUrl: './create-new-quiz.component.html',\r\n  styleUrls: ['./create-new-quiz.component.scss']\r\n})\r\nexport class CreateNewQuizComponent implements OnInit,OnDestroy{\r\n  categoryList: MainCategory<Category[]>;\r\n  questionResult: questionAnswers;\r\n  amount = QuizMakerConstants.AMOUNT;\r\n  type = QuizMakerConstants.TYPE;\r\n  subscription: Subscription = new Subscription();\r\n\r\n  CreateQuizForm = new FormGroup({\r\n    category: new FormControl(''),\r\n    difficulty: new FormControl(''),\r\n  });\r\n\r\n  difficultyLevels =[\r\n    { name: 'Select Difficulty', level: ''},\r\n    { name: 'Easy', level: 'easy'},\r\n    { name: 'Medium', level: 'medium'},\r\n    { name: 'Hard', level: 'hard'}\r\n  ]\r\n\r\n  constructor(private quizService: QuizService,\r\n    private spinner: NgxSpinnerService){ }\r\n\r\n  ngOnInit(): void{\r\n    //to get categories \r\n    this.spinner.show();\r\n    this.subscription = this.quizService.getCategories().subscribe((res:MainCategory<Category[]>)=>{\r\n      this.categoryList = res;\r\n     })\r\n    this.spinner.hide();\r\n  }\r\n\r\n  createQuiz(): void{\r\n    const category: string = this.CreateQuizForm.value.category as string;\r\n    const difficulty : string= this.CreateQuizForm.value.difficulty as string;\r\n    if (category !== '' && difficulty !== '') {\r\n    this.spinner.show();\r\n      //to get list of questions based on category, difficulty level\r\n    this.subscription = this.quizService.getQuestionsList(this.amount, category,difficulty, this.type)\r\n    .subscribe((res:questionAnswers) => {\r\n      this.questionResult = res;\r\n\r\n      for (let option of this.questionResult.results){\r\n        option.question = decode(option.question);\r\n        option.correct_answer = decode(option.correct_answer);\r\n        option.selectedAnswer = '';\r\n  \r\n        //generate random index\r\n        let insertrandomIndex = Math.floor(Math.random() * 4);\r\n  \r\n        //insert correct answer into array \r\n        option.incorrect_answers.splice(insertrandomIndex, 0, option.correct_answer)\r\n        \r\n        for (const [key, value] of option.incorrect_answers.entries()) {\r\n          option.incorrect_answers[key] = decode(value);\r\n        }\r\n  \r\n      }\r\n\r\n      this.spinner.hide();\r\n    })\r\n\r\n  }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","<div class=\"createNewQuizpage\">\r\n  <h4>QUIZ MAKER</h4>\r\n\r\n  <form [formGroup]=\"CreateQuizForm\">\r\n    <div class=\"row\">\r\n      <div class=\"form-group col-md-5\">\r\n        <select formControlName=\"category\" id=\"categorySelect\" class=\"form-control\"\r\n          placeholder=\"Select a category\">\r\n          <option value=\"\">Select a category</option>\r\n          <option [value]=\"category?.id\" *ngFor=\"let category of categoryList?.trivia_categories;let i=index\">\r\n            {{category?.name}}</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"form-group col-md-5\">\r\n        <select formControlName=\"difficulty\" id=\"difficultySelect\" class=\"form-control\"\r\n          placeholder=\"Select difficulty\">\r\n          <option [value]=\"difficulty.level\" *ngFor=\"let difficulty of difficultyLevels\">{{difficulty.name}}</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"form-group col-md-1\">\r\n        <button class=\"btn create-quiz-btn\" id=\"createBtn\"  (click)=\"createQuiz()\">Create</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n</div>\r\n\r\n<div *ngIf=\"questionResult?.results\" class=\"question-list\">\r\n  <app-questions [results]=\"questionResult.results\"></app-questions>\r\n</div>\r\n\r\n<ngx-spinner\r\n  bdColor=\"rgba(0, 0, 0, 0.5)\"\r\n  template=\"<img src='../../../assets/images/loader.gif' />\"\r\n>\r\n</ngx-spinner>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}